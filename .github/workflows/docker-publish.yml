# ===============================================================================
# GitHub Actions Workflow: Docker Build and Publish to GHCR
# ===============================================================================
# This workflow automates building and publishing Docker images to GitHub 
# Container Registry (GHCR). It supports multi-platform builds, security 
# scanning, and semantic versioning.
#
# Triggers:
#   - Push to main branch -> builds 'latest' tag
#   - Push version tags (v*.*.*) -> builds versioned tags  
#   - Pull requests -> builds for testing (no publish)
#   - Manual workflow dispatch -> on-demand builds
#
# Features:
#   - Multi-platform support (linux/amd64, linux/arm64)
#   - Trivy vulnerability scanning
#   - Docker layer caching for faster builds
#   - Automated tagging and versioning
#   - Security reports in GitHub Security tab
# ===============================================================================

name: Docker Build and Publish to GHCR

# ===============================================================================
# WORKFLOW TRIGGERS
# ===============================================================================
on:
  # Trigger on push to main branch (builds 'latest' tag)
  push:
    branches:
      - main
    # Trigger on version tags (e.g., v1.0.0, v2.1.3)
    tags:
      - 'v*.*.*'
  
  # Trigger on pull requests (builds but doesn't publish - for testing)
  pull_request:
    branches:
      - main
  
  # Allow manual workflow runs from GitHub Actions UI
  workflow_dispatch:

# ===============================================================================
# ENVIRONMENT VARIABLES
# ===============================================================================
# These variables are accessible in all jobs
env:
  # GitHub Container Registry URL
  REGISTRY: ghcr.io
  
  # Image names (automatically uses repository owner and name, converted to lowercase)
  # Format: ghcr.io/{owner}/{repo}/backend
  # Note: Docker image names must be lowercase
  BACKEND_IMAGE_NAME: ${{ github.repository_owner }}/pomowatch/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository_owner }}/pomowatch/frontend

# ===============================================================================
# JOBS
# ===============================================================================
jobs:
  # =============================================================================
  # JOB 1: Build Backend Docker Image
  # =============================================================================
  build-backend:
    # Run on Ubuntu latest GitHub-hosted runner
    runs-on: ubuntu-latest
    
    # Permissions needed for this job
    permissions:
      contents: read      # Read repository contents
      packages: write     # Publish to GitHub Packages (GHCR)
      security-events: write  # Upload security scan results

    steps:
      # ---------------------------------------------------------------------------
      # Step 1: Checkout the repository code
      # ---------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------------------------------------------------------------------------
      # Step 2: Set up QEMU for multi-platform builds
      # ---------------------------------------------------------------------------
      # QEMU allows building Docker images for different CPU architectures
      # (e.g., ARM64 for Raspberry Pi, amd64 for standard servers)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # ---------------------------------------------------------------------------
      # Step 3: Set up Docker Buildx
      # ---------------------------------------------------------------------------
      # Buildx is Docker's advanced build system that supports:
      # - Multi-platform builds
      # - Build caching
      # - Parallel builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------------------------------------------------------------------------
      # Step 4: Login to GitHub Container Registry
      # ---------------------------------------------------------------------------
      # Authenticates to GHCR using GitHub's automatically provided token
      # No need to create or store tokens manually!
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}           # GitHub username who triggered the workflow
          password: ${{ secrets.GITHUB_TOKEN }}   # Auto-provided by GitHub Actions

      # ---------------------------------------------------------------------------
      # Step 5: Extract Docker metadata (tags and labels)
      # ---------------------------------------------------------------------------
      # Automatically generates appropriate tags based on Git events:
      # - Push to main -> 'latest' + 'main-{sha}'
      # - Tag v1.2.3 -> 'v1.2.3', 'v1.2', 'v1', 'latest'
      # - PR #123 -> 'pr-123'
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch                                   # Branch name (e.g., 'main')
            type=ref,event=pr                                       # PR number (e.g., 'pr-123')
            type=semver,pattern={{version}}                         # Full version (e.g., '1.2.3')
            type=semver,pattern={{major}}.{{minor}}                 # Major.minor (e.g., '1.2')
            type=semver,pattern={{major}}                           # Major only (e.g., '1')
            type=sha,prefix={{branch}}-                             # Git SHA (e.g., 'main-abc123')
            type=raw,value=latest,enable={{is_default_branch}}      # 'latest' tag on main branch

      # ---------------------------------------------------------------------------
      # Step 6: Build and push Docker image
      # ---------------------------------------------------------------------------
      # Builds the backend Docker image for multiple platforms and pushes to GHCR
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend                                        # Build context (where Dockerfile is)
          file: ./backend/Dockerfile                                # Path to Dockerfile
          platforms: linux/amd64,linux/arm64                        # Build for both x86 and ARM architectures
          push: ${{ github.event_name != 'pull_request' }}          # Push only on non-PR events
          tags: ${{ steps.meta.outputs.tags }}                      # Use tags from metadata step
          labels: ${{ steps.meta.outputs.labels }}                  # Use labels from metadata step
          cache-from: type=gha                                      # Use GitHub Actions cache for layers
          cache-to: type=gha,mode=max                               # Save all layers to cache (max mode)

      # ---------------------------------------------------------------------------
      # Step 7: Run Trivy vulnerability scanner
      # ---------------------------------------------------------------------------
      # Scans the built Docker image for known security vulnerabilities
      # Only runs on non-PR events (skip for PR builds)
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          format: 'sarif'                                           # SARIF format for GitHub Security
          output: 'trivy-backend-results.sarif'                     # Output file

      # ---------------------------------------------------------------------------
      # Step 8: Upload security scan results to GitHub
      # ---------------------------------------------------------------------------
      # Uploads Trivy scan results to GitHub Security tab
      # Allows viewing vulnerabilities directly in the repository
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # =============================================================================
  # JOB 2: Build Frontend Docker Image
  # =============================================================================
  # Same steps as backend, but for the frontend service
  build-frontend:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      # ---------------------------------------------------------------------------
      # Step 1: Checkout the repository code
      # ---------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------------------------------------------------------------------------
      # Step 2: Set up QEMU for multi-platform builds
      # ---------------------------------------------------------------------------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # ---------------------------------------------------------------------------
      # Step 3: Set up Docker Buildx
      # ---------------------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------------------------------------------------------------------------
      # Step 4: Login to GitHub Container Registry
      # ---------------------------------------------------------------------------
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------------------------------------------------------------------------
      # Step 5: Extract Docker metadata (tags and labels)
      # ---------------------------------------------------------------------------
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # ---------------------------------------------------------------------------
      # Step 6: Build and push Docker image
      # ---------------------------------------------------------------------------
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------------------------------------------------------------------------
      # Step 7: Run Trivy vulnerability scanner
      # ---------------------------------------------------------------------------
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      # ---------------------------------------------------------------------------
      # Step 8: Upload security scan results to GitHub
      # ---------------------------------------------------------------------------
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  # =============================================================================
  # JOB 3: Deployment Summary
  # =============================================================================
  # Creates a summary of the deployment in GitHub Actions UI
  summary:
    runs-on: ubuntu-latest
    
    # This job depends on both build jobs completing successfully
    needs: [build-backend, build-frontend]
    
    # Only run for actual deployments (not PRs)
    if: github.event_name != 'pull_request'
    
    steps:
      # ---------------------------------------------------------------------------
      # Create deployment summary
      # ---------------------------------------------------------------------------
      # Displays helpful information about the deployed images
      # Visible in the GitHub Actions workflow summary
      - name: Deployment Summary
        run: |
          echo "### 🚀 Deployment Complete! ###" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Image:** \`${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Image:** \`${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Commands:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

# ===============================================================================
# END OF WORKFLOW
# ===============================================================================
# After this workflow completes:
# 1. Docker images are available at ghcr.io/{owner}/pomowatch/{backend|frontend}
# 2. Security scan results appear in the GitHub Security tab
# 3. Images can be pulled using: docker pull ghcr.io/{owner}/pomowatch/backend:latest
# ===============================================================================
