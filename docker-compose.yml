# ===============================================================================
# Development Docker Compose Configuration
# ===============================================================================
# This compose file builds Docker images locally from source code.
# Use this for local development and testing before deploying to production.
#
# Usage:
#   Start:   docker-compose up --build
#   Stop:    docker-compose down
#   Logs:    docker-compose logs -f
#   Rebuild: docker-compose up --build --force-recreate
#
# Features:
#   - Builds images from local Dockerfiles
#   - Development environment configuration
#   - Hot-reload ready (can mount volumes for source code)
#   - Persistent database storage
#   - Automatic container restart
#
# For production deployment, use docker-compose.prod.yml instead
# ===============================================================================

version: '3.8'

# ===============================================================================
# SERVICES
# ===============================================================================
services:
  # =============================================================================
  # Backend Service (.NET 8 Web API)
  # =============================================================================
  backend:
    # Build configuration
    build:
      # Build context (directory containing Dockerfile and source code)
      context: ./backend
      
      # Dockerfile to use for building
      dockerfile: Dockerfile
    
    # Container name (easier to identify and manage)
    container_name: pomodoro-backend
    
    # Port mapping: host:container
    # Maps host port 5001 to container port 5000
    # This avoids conflicts with local development (which uses 5000)
    # Access via: http://localhost:5001
    ports:
      - "5001:5000"
    
    # Volume mounts for persistent data
    # Maps ./data directory on host to /app/data in container
    # SQLite database will persist across container restarts and rebuilds
    volumes:
      - ./data:/app/data
    
    # Environment variables for .NET application
    environment:
      # Run in Development mode (detailed logging, swagger enabled)
      - ASPNETCORE_ENVIRONMENT=Development
      
      # Listen on all network interfaces (required for Docker)
      # 0.0.0.0 allows connections from outside the container
      - ASPNETCORE_URLS=http://0.0.0.0:5000
      
      # Database connection string
      # Points to SQLite database in the mounted volume
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/pomodoro.db
    
    # Network configuration
    # Connects to shared network for inter-service communication
    networks:
      - pomodoro-net
    
    # Restart policy
    # Automatically restart container unless explicitly stopped
    # Helps recover from crashes during development
    restart: unless-stopped

  # =============================================================================
  # Frontend Service (Angular + Nginx)
  # =============================================================================
  frontend:
    # Build configuration
    build:
      # Build context (directory containing Dockerfile and source code)
      context: ./frontend
      
      # Dockerfile to use for building
      dockerfile: Dockerfile
    
    # Container name
    container_name: pomodoro-frontend
    
    # Port mapping: host:container
    # Maps host port 4201 to container port 80 (nginx default)
    # This avoids conflicts with local development (ng serve on 4200)
    # Access via: http://localhost:4201
    ports:
      - "4201:80"
    
    # Service dependencies
    # Ensures backend starts before frontend
    # Frontend needs backend API to be available
    depends_on:
      - backend
    
    # Network configuration
    # Connects to shared network to communicate with backend
    # Can reach backend using service name: http://backend:5000
    networks:
      - pomodoro-net
    
    # Restart policy
    restart: unless-stopped

# ===============================================================================
# NETWORKS
# ===============================================================================
# Shared network for inter-service communication
networks:
  pomodoro-net:
    # Bridge driver creates an isolated network
    # Containers can communicate with each other using service names
    # Example: Frontend can call http://backend:5000/api/health
    driver: bridge

# ===============================================================================
# VOLUMES
# ===============================================================================
# Named volumes for persistent data
volumes:
  # Database volume (defined but using bind mount above)
  # Ensures SQLite database persists across container lifecycle
  data:

# ===============================================================================
# DEVELOPMENT NOTES
# ===============================================================================
# Port Allocation:
#   - Backend:  5001 (Docker) vs 5000 (local dev with dotnet run)
#   - Frontend: 4201 (Docker) vs 4200 (local dev with ng serve)
#   This allows running both Docker and local development simultaneously!
#
# First Time Setup:
#   1. mkdir -p data
#   2. docker-compose up --build
#   3. Access frontend at http://localhost:4201
#   4. Access backend at http://localhost:5001/api/health
#   5. Access Swagger at http://localhost:5001/swagger
#
# Common Commands:
#   Build and start:     docker-compose up --build
#   Start in background: docker-compose up -d
#   View logs:           docker-compose logs -f
#   Stop services:       docker-compose down
#   Rebuild from scratch: docker-compose up --build --force-recreate
#   Remove volumes:      docker-compose down -v  (⚠️ Deletes database!)
#
# Troubleshooting:
#   - Port already in use: Change host port in ports configuration
#   - Database locked: Stop containers and restart: docker-compose restart
#   - Build fails: Clear cache and rebuild: docker-compose build --no-cache
#   - Changes not reflected: Force recreate: docker-compose up --force-recreate
# ===============================================================================
